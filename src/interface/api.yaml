openapi: 3.0.1
info:
  title: Mojaloop Auth-Service API
  version: 0.1.0
  description: 'An API a central auth service in Mojaloop, concerned with creating \nand managing Consents and validating thirdparty transactions'
  license:
    name: Open API for FSP Interoperability (FSPIOP) (Implementation Friendly Version)
servers:
  - url: /
paths:
  /health:
    get:
      tags:
        - health
      responses:
        '200':
          $ref: '#/paths/~1hello/get/responses/200'
        '400':
          $ref: '#/paths/~1hello/get/responses/400'
        '401':
          $ref: '#/paths/~1hello/get/responses/401'
        '403':
          $ref: '#/paths/~1hello/get/responses/403'
        '404':
          $ref: '#/paths/~1hello/get/responses/404'
        '405':
          $ref: '#/paths/~1hello/get/responses/405'
        '406':
          $ref: '#/paths/~1hello/get/responses/406'
        '501':
          $ref: '#/paths/~1hello/get/responses/501'
        '503':
          $ref: '#/paths/~1hello/get/responses/503'
      operationId: HealthGet
      summary: Get Server
      description: The HTTP request GET /health is used to return the current status of the API.
  /metrics:
    get:
      tags:
        - metrics
      responses:
        '200':
          $ref: '#/paths/~1hello/get/responses/200'
        '400':
          $ref: '#/paths/~1hello/get/responses/400'
        '401':
          $ref: '#/paths/~1hello/get/responses/401'
        '403':
          $ref: '#/paths/~1hello/get/responses/403'
        '404':
          $ref: '#/paths/~1hello/get/responses/404'
        '405':
          $ref: '#/paths/~1hello/get/responses/405'
        '406':
          $ref: '#/paths/~1hello/get/responses/406'
        '501':
          $ref: '#/paths/~1hello/get/responses/501'
        '503':
          $ref: '#/paths/~1hello/get/responses/503'
      operationId: MetricsGet
      summary: Prometheus metrics endpoint
      description: The HTTP request GET /metrics is used to return metrics for the API.
  /hello:
    get:
      tags:
        - metrics
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                title: ErrorInformationResponse
                type: object
                description: Data model for the complex type object that contains an optional element ErrorInformation used along with 4xx and 5xx responses.
                properties:
                  errorInformation:
                    title: ErrorInformation
                    type: object
                    description: Data model for the complex type ErrorInformation.
                    properties:
                      errorCode:
                        title: ErrorCode
                        type: string
                        pattern: '^[1-9]\d{3}$'
                        description: |
                          The API data type ErrorCode is a JSON String of four characters,
                          consisting of digits only. Negative numbers are not allowed.
                          A leading zero is not allowed. Each error code in the API is a
                          four-digit number, for example, 1234, where the first number
                          (1 in the example) represents the high-level error category,
                          the second number (2 in the example) represents the low-level error category,
                          and the last two numbers (34 in the example) represent the specific error.
                        example: 5100
                      errorDescription:
                        title: ErrorDescription
                        type: string
                        minLength: 1
                        maxLength: 128
                        description: Error description string.
                        example: This is an error description.
                      extensionList:
                        title: ExtensionList
                        type: object
                        description: |
                          Data model for the complex type ExtensionList.
                          An optional list of extensions, specific to deployment.
                        properties:
                          extension:
                            type: array
                            items:
                              title: Extension
                              type: object
                              description: Data model for the complex type Extension.
                              properties:
                                key:
                                  title: ExtensionKey
                                  type: string
                                  minLength: 1
                                  maxLength: 32
                                  description: Extension key.
                                value:
                                  title: ExtensionValue
                                  type: string
                                  minLength: 1
                                  maxLength: 128
                                  description: Extension value.
                              required:
                                - key
                                - value
                            minItems: 1
                            maxItems: 16
                            description: Number of Extension elements.
                        required:
                          - extension
                    required:
                      - errorCode
                      - errorDescription
          headers:
            Content-Length:
              required: false
              schema:
                type: integer
              description: |
                The `Content-Length` header field indicates the anticipated
                size of the payload body. Only sent if there is a body.
                **Note:** The API supports a maximum size of 5242880 bytes
                (5 Megabytes).
            Content-Type:
              schema:
                type: string
              required: true
              description: The `Content-Type` header indicates the specific version of the API used to send the payload body.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/paths/~1hello/get/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Type'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/paths/~1hello/get/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Type'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/paths/~1hello/get/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Type'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/paths/~1hello/get/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Type'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/paths/~1hello/get/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Type'
        '501':
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/paths/~1hello/get/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Type'
        '503':
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/paths/~1hello/get/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Type'
      operationId: HelloGet
      summary: example get
      description: The HTTP request GET /hello is used to return some example json.
  /consents:
    post:
      description: |
        The HTTP request `POST /consents` is used to create a consent object.

        - Called by `DFSP` after the successful creation and validation of a consentRequest.
      summary: Create Consent
      tags:
        - consent
      operationId: CreateConsent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: Consent
              type: object
              description: Data model for the complex type Consent.
              properties:
                id:
                  allOf:
                    - title: CorrelationId
                      type: string
                      pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'
                      description: |
                        Identifier that correlates all messages of the same sequence.
                        The API data type UUID (Universally Unique Identifier) is a JSON String
                        in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122),
                        that is restricted by a regular expression for interoperability reasons.
                        A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                      example: b51ec534-ee48-4575-b6a9-ead2955b8069
                  description: |
                    Common ID between the PISP and FSP for the Consent object
                    decided by the DFSP who creates the Consent
                    This field is REQUIRED for POST /consent.
                requestId:
                  allOf:
                    - $ref: '#/paths/~1consents/post/requestBody/content/application~1json/schema/properties/id/allOf/0'
                  description: |
                    The id of the ConsentRequest that was used to initiate the
                    creation of this Consent.
                participantId:
                  title: FspId
                  type: string
                  minLength: 1
                  maxLength: 32
                  description: FSP identifier.
                  example: 1234
                initiatorId:
                  allOf:
                    - $ref: '#/paths/~1consents/post/requestBody/content/application~1json/schema/properties/participantId'
                  description: PISP identifier who uses this Consent.
                revokedAt:
                  title: DateTime
                  type: string
                  pattern: '^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:(\.\d{3}))(?:Z|[+-][01]\d:[0-5]\d)$'
                  description: |
                    The API data type DateTime is a JSON String in a lexical format that is
                    restricted by a regular expression for interoperability reasons.
                    The format is according to
                    [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html),
                    expressed in a combined date, time and time zone format.
                    A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM].
                    Examples are \"2016-05-24T08:38:08.699-04:00\", \"2016-05-24T08:38:08.699Z\"
                    (where Z indicates Zulu time zone, same as UTC).
                  example: '2016-05-24T08:38:08.699-04:00'
                scopes:
                  type: array
                  items:
                    title: Scope
                    type: object
                    description: Scope + Account Identifier mapping for a Consent.
                    properties:
                      scope:
                        title: AuthScopesType
                        type: string
                        enum:
                          - accounts.getBalance
                          - accounts.transfer
                        description: |
                          The scopes requested for a ConsentRequest.
                          - "accounts.getBalance" - Get the balance of a given account.
                          - "accounts.transfer" - Initiate a transfer from an account.
                      accountId:
                        $ref: '#/paths/~1thirdPartyRequests~1transactions~1%7BID%7D~1authorizations/post/requestBody/content/application~1json/schema/properties/sourceAccountId/allOf/0'
                    required:
                      - scope
                      - accountId
                credential:
                  title: Credential
                  type: object
                  description: |
                    A credential used to allow a user to prove their identity and
                    access to an account with a DFSP.
                  properties:
                    id:
                      type: string
                      description: The id of a Credential.
                    type:
                      $ref: '#/paths/~1consents~1%7BID%7D~1generateChallenge/post/requestBody/content/application~1json/schema/properties/type'
                    status:
                      title: CredentialStatusType
                      type: string
                      enum:
                        - PENDING
                        - ACTIVE
                      description: |
                        The status of the Credential's creation
                        - "PENDING" - The PISP has requested a challenge, or the challenge has
                                      initialized but not yet answered by the PISP.
                        - "VERIFIED" - The Credential is valid, and ready to be used by the PISP.
                    challenge:
                      title: CredentialChallenge
                      type: object
                      description: |
                        The challenge issued by a DFSP that must be answered by the PISP.
                      properties:
                        payload:
                          type: string
                          description: Base64 encoded binary of the challenge that must be answered by the PISP.
                        signature:
                          type: string
                          description: Base64 encoded binary string or result of the payload signed by the PISP using the private key.
                      required:
                        - payload
                    payload:
                      type: string
                      description: Base64 encoded bytes - The public key of the Public/Private keypair.
                  required:
                    - id
                    - type
                    - status
              required:
                - id
                - scopes
                - participantId
                - initiatorId
                - credential
            example:
              id: '123'
              requestId: '456'
              initiatorId: pispa
              participantId: dfspa
              scopes:
                - scope: account.balanceInquiry
                  accountId: dfspa.alice.1234
                - scope: account.sendTransfer
                  accountId: dfspa.alice.1234
                - scope: account.sendTransfer
                  accountId: dfspa.alice.5678
              credential: null
      parameters:
        - name: Content-Length
          in: header
          required: false
          schema:
            type: integer
          description: |
            The `Content-Length` header field indicates the anticipated size of the
            payload body. Only sent if there is a body.
            **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/2'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/3'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/4'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/5'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/6'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/7'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/8'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/9'
      responses:
        '202':
          description: Accepted
        '400':
          $ref: '#/paths/~1hello/get/responses/400'
        '401':
          $ref: '#/paths/~1hello/get/responses/401'
        '403':
          $ref: '#/paths/~1hello/get/responses/403'
        '404':
          $ref: '#/paths/~1hello/get/responses/404'
        '405':
          $ref: '#/paths/~1hello/get/responses/405'
        '406':
          $ref: '#/paths/~1hello/get/responses/406'
        '501':
          $ref: '#/paths/~1hello/get/responses/501'
        '503':
          $ref: '#/paths/~1hello/get/responses/503'
  '/consents/{ID}':
    parameters:
      - name: ID
        in: path
        required: true
        schema:
          type: string
        description: The identifier value.
      - name: Content-Type
        in: header
        schema:
          type: string
        required: true
        description: |
          The `Content-Type` header indicates the specific version of the API used
          to send the payload body.
      - name: Date
        in: header
        schema:
          type: string
        required: true
        description: The `Date` header field indicates the date when the request was sent.
      - name: X-Forwarded-For
        in: header
        schema:
          type: string
        required: false
        description: |
          The `X-Forwarded-For` header field is an unofficially accepted standard used
          for informational purposes of the originating client IP address, as a
          request might pass multiple proxies, firewalls, and so on. Multiple
          `X-Forwarded-For` values should be expected and supported by implementers
          of the API.
          **Note:** An alternative to `X-Forwarded-For` is defined in
          [RFC 7239](https://tools.ietf.org/html/rfc7239).
          However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
      - name: FSPIOP-Source
        in: header
        schema:
          type: string
        required: true
        description: |
          The `FSPIOP-Source` header field is a non-HTTP standard field
          used by the API for identifying the sender of the HTTP request.
          The field should be set by the original sender of the request.
          Required for routing and signature verification
          (see header field `FSPIOP-Signature`).
      - name: FSPIOP-Destination
        in: header
        schema:
          type: string
        required: false
        description: |
          The `FSPIOP-Destination` header field is a non-HTTP standard field used by
          the API for HTTP header based routing of requests and responses to the
          destination. The field should be set by the original sender of the request
          (if known), so that any entities between the client and the server do not
          need to parse the payload for routing purposes.
      - name: FSPIOP-Encryption
        in: header
        schema:
          type: string
        required: false
        description: |
          The `FSPIOP-Encryption` header field is a non-HTTP standard field used by
          the API for applying end-to-end encryption of the request.
      - name: FSPIOP-Signature
        in: header
        schema:
          type: string
        required: false
        description: |
          The `FSPIOP-Signature` header field is a non-HTTP standard field used by the
          API for applying an end-to-end request signature.
      - name: FSPIOP-URI
        in: header
        schema:
          type: string
        required: false
        description: |
          The `FSPIOP-URI` header field is a non-HTTP standard field used by the API
          for signature verification, should contain the service URI. Required if
          signature verification is used, for more information, see
          [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      - name: FSPIOP-HTTP-Method
        in: header
        schema:
          type: string
        required: false
        description: |
          The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by
          the API for signature verification, should contain the service HTTP method.
          Required if signature verification is used, for more information, see
          [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    get:
      description: |
        The HTTP request `GET /consents/{ID}` is used to get information regarding a consent object created or requested earlier. The `{ID}` in the URI should contain the `{ID}` that was used in the `POST /consents`. summary: GetConsent
      tags:
        - consent
      operationId: GetConsent
      parameters:
        - name: Accept
          in: header
          required: true
          schema:
            type: string
          description: |
            The `Accept` header field indicates the version of the API the client
            would like the server to use.
      responses:
        '202':
          $ref: '#/paths/~1consents/post/responses/202'
        '400':
          $ref: '#/paths/~1hello/get/responses/400'
        '401':
          $ref: '#/paths/~1hello/get/responses/401'
        '403':
          $ref: '#/paths/~1hello/get/responses/403'
        '404':
          $ref: '#/paths/~1hello/get/responses/404'
        '405':
          $ref: '#/paths/~1hello/get/responses/405'
        '406':
          $ref: '#/paths/~1hello/get/responses/406'
        '501':
          $ref: '#/paths/~1hello/get/responses/501'
        '503':
          $ref: '#/paths/~1hello/get/responses/503'
    put:
      description: |
        The HTTP request `PUT /consents/{ID}` is used to update a specified consent object.
        The `{ID}` in the URI should contain the `{ID}` that was used in the `POST /consents`.

        - Called by a `auth-service` to add the credential details

        - Called by a `PISP` to add a signature of the challenge
      summary: UpdateConsent
      tags:
        - consent
      operationId: UpdateConsent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example:
                requestId: '456'
                initiatorId: dfspa
                participantId: pispa
                scopes:
                  - scope: account.balanceInquiry
                    accountId: dfspa.alice.1234
                  - scope: account.sendTransfer
                    accountId: dfspa.alice.1234
                  - scope: account.sendTransfer
                    accountId: dfspa.alice.5678
                credential:
                  id: '5678'
                  credentialType: FIDO
                  credentialStatus: ACTIVE
                  challenge:
                    payload: base64(...)
                    signature: base64(...)
                  payload: base64(...)
              title: ConsentIDPutRequest
              type: object
              description: Data model for the complex type Consent.
              properties:
                requestId:
                  allOf:
                    - $ref: '#/paths/~1consents/post/requestBody/content/application~1json/schema/properties/id/allOf/0'
                  description: |
                    The id of the ConsentRequest that was used to initiate the
                    creation of this Consent.
                participantId:
                  $ref: '#/paths/~1consents/post/requestBody/content/application~1json/schema/properties/participantId'
                initiatorId:
                  allOf:
                    - $ref: '#/paths/~1consents/post/requestBody/content/application~1json/schema/properties/participantId'
                  description: PISP identifier who uses this Consent.
                scopes:
                  type: array
                  items:
                    $ref: '#/paths/~1consents/post/requestBody/content/application~1json/schema/properties/scopes/items'
                credential:
                  title: UpdatedCredential
                  type: object
                  description: |
                    A credential used to allow a user to prove their identity and access
                    to an account with a DFSP.

                    UpdatedCredential is a special formatting of the credential to allow us to be
                    more explict about the `status` field - it should only ever be PENDING when updating
                    a credential.
                  properties:
                    id:
                      type: string
                      description: The id of a Credential.
                    type:
                      $ref: '#/paths/~1consents~1%7BID%7D~1generateChallenge/post/requestBody/content/application~1json/schema/properties/type'
                    status:
                      $ref: '#/paths/~1consents/post/requestBody/content/application~1json/schema/properties/credential/properties/status'
                    challenge:
                      $ref: '#/paths/~1consents/post/requestBody/content/application~1json/schema/properties/credential/properties/challenge'
                    payload:
                      type: string
                      description: Base64 encoded bytes - The public key of the Public/Private keypair.
                  required:
                    - id
                    - type
                    - status
                    - challenge
                    - payload
              required:
                - requestId
                - participantId
                - initiatorId
                - scopes
                - credential
      parameters:
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'
      responses:
        '202':
          $ref: '#/paths/~1consents/post/responses/202'
        '400':
          $ref: '#/paths/~1hello/get/responses/400'
        '401':
          $ref: '#/paths/~1hello/get/responses/401'
        '403':
          $ref: '#/paths/~1hello/get/responses/403'
        '404':
          $ref: '#/paths/~1hello/get/responses/404'
        '405':
          $ref: '#/paths/~1hello/get/responses/405'
        '406':
          $ref: '#/paths/~1hello/get/responses/406'
        '501':
          $ref: '#/paths/~1hello/get/responses/501'
        '503':
          $ref: '#/paths/~1hello/get/responses/503'
  '/consents/{ID}/generateChallenge':
    post:
      description: |
        The HTTP request `POST /consents/{ID}/generateChallenge` is used to create a credential for the given Consent object.
        The `{ID}` in the URI should contain the `{ID}` that was used in the `POST /consents`.

        - Called by a `PISP` to request a challenge from the `auth-service`, which will be returned to the PISP via `PUT /consents/{ID}`
      summary: GenerateChallengeRequest
      tags:
        - consent
      operationId: GenerateChallengeRequest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: ConsentGenerateChallengeIDPostRequest
              type: object
              description: |
                A credential used to allow a user to prove their identity
                and access to an account with a DFSP.
              properties:
                type:
                  title: CredentialType
                  type: string
                  enum:
                    - FIDO
                  description: |
                    The type of the Credential.
                    - "FIDO" - A FIDO public/private keypair.
              required:
                - type
            example: {}
      parameters:
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/0'
        - $ref: '#/paths/~1consents/post/parameters/0'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/2'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/3'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/4'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/5'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/6'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/7'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/8'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/9'
      responses:
        '202':
          $ref: '#/paths/~1consents/post/responses/202'
        '400':
          $ref: '#/paths/~1hello/get/responses/400'
        '401':
          $ref: '#/paths/~1hello/get/responses/401'
        '403':
          $ref: '#/paths/~1hello/get/responses/403'
        '404':
          $ref: '#/paths/~1hello/get/responses/404'
        '405':
          $ref: '#/paths/~1hello/get/responses/405'
        '406':
          $ref: '#/paths/~1hello/get/responses/406'
        '501':
          $ref: '#/paths/~1hello/get/responses/501'
        '503':
          $ref: '#/paths/~1hello/get/responses/503'
  '/consents/{ID}/revoke':
    post:
      description: |
        The HTTP request `POST /consents/{ID}/revoke` is used to revoke a previously created consent.

        - Called by a PISP when a user wants to unlink their account(s).
      parameters:
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/0'
        - $ref: '#/paths/~1consents/post/parameters/0'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/2'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/3'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/4'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/5'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/6'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/7'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/8'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/9'
      operationId: RevokeConsent
      responses:
        '202':
          $ref: '#/paths/~1consents/post/responses/202'
        '400':
          $ref: '#/paths/~1hello/get/responses/400'
        '401':
          $ref: '#/paths/~1hello/get/responses/401'
        '403':
          $ref: '#/paths/~1hello/get/responses/403'
        '404':
          $ref: '#/paths/~1hello/get/responses/404'
        '405':
          $ref: '#/paths/~1hello/get/responses/405'
        '406':
          $ref: '#/paths/~1hello/get/responses/406'
        '501':
          $ref: '#/paths/~1hello/get/responses/501'
        '503':
          $ref: '#/paths/~1hello/get/responses/503'
  '/thirdPartyRequests/transactions/{ID}/authorizations':
    post:
      description: |
        The HTTP request `POST /thirdPartyRequests/transactions/{id}/authorizations` is called by
        the DFSP to check that a ThirdPartyRequest is valid
      summary: ThirdpartyAuthorizationRequest
      tags:
        - thirdPartyRequests
      operationId: VerifyThirdPartyAuthorization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: ThirdpartyAuthorizationIDPostRequest
              type: object
              description: 'The object sent in the POST /thirdpartyRequests/transactions/{id}/authorizations request.'
              properties:
                challenge:
                  type: string
                  description: The original Challenge Object as a JSON string
                value:
                  allOf:
                    - type: string
                      pattern: '^[A-Za-z0-9-_]+[=]{0,2}$'
                      description: |
                        The API data type BinaryString is a JSON String.
                        The string is a base64url  encoding of a string of raw bytes,
                        where padding (character ‘=’) is added at the end of the data if
                        needed to ensure that the string is a multiple of 4 characters.
                        The length restriction indicates the allowed number of characters.
                  description: Base64 encoded binary string - the signed challenge
                consentId:
                  allOf:
                    - $ref: '#/paths/~1consents/post/requestBody/content/application~1json/schema/properties/id/allOf/0'
                  description: |
                    Common ID between the PISP and FSP for the Consent object This tells DFSP and auth-service which constent allows the PISP to initiate transaction.
                sourceAccountId:
                  allOf:
                    - title: AccountAddress
                      type: string
                      description: |
                        A long-lived unique account identifier provided by the DFSP. This MUST NOT
                        be Bank Account Number or anything that may expose a User's private bank
                        account information.
                      pattern: '^([0-9A-Za-z_~\-\.]+[0-9A-Za-z_~\-])$'
                      minLength: 1
                      maxLength: 1023
                  description: 'DFSP specific account identifiers, e.g. `dfspa.alice.1234`'
                status:
                  type: string
                  enum:
                    - PENDING
                  description: The status of the authorization. This MUST be PENDING for a POST request
              required:
                - challenge
                - value
                - consentId
                - sourceAccountId
                - status
            example:
              challenge: <QuoteResponse object>
              value: <base64 encoded binary - the signed quote response object>
              consentId: '111'
              sourceAccountId: dfspa.1111-2222
              status: PENDING
      parameters:
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/0'
        - $ref: '#/paths/~1consents~1%7BID%7D/get/parameters/0'
        - $ref: '#/paths/~1consents/post/parameters/0'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/2'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/3'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/4'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/5'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/6'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/7'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/8'
        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/9'
      responses:
        '202':
          $ref: '#/paths/~1consents/post/responses/202'
        '400':
          $ref: '#/paths/~1hello/get/responses/400'
        '401':
          $ref: '#/paths/~1hello/get/responses/401'
        '403':
          $ref: '#/paths/~1hello/get/responses/403'
        '404':
          $ref: '#/paths/~1hello/get/responses/404'
        '405':
          $ref: '#/paths/~1hello/get/responses/405'
        '406':
          $ref: '#/paths/~1hello/get/responses/406'
        '501':
          $ref: '#/paths/~1hello/get/responses/501'
        '503':
          $ref: '#/paths/~1hello/get/responses/503'
